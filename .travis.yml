---
language: go
go:
  - "1.14.2"

matrix:
  include:

    - name: Testing Framework
      os: linux
      services: docker
      before_install:
        - go mod download
        - diff -u <(echo -n) <(gofmt -d $(find . -not -path "./vendor/*" -name "*.go"));
        - sed -i -e "s|COMMITTAG = \"\"|COMMITTAG = \"${TRAVIS_COMMIT}\"|g" service/library/version.go
        - cat service/library/version.go | grep 'COMMITTAG = "'
        - GO111MODULE=on go vet $(go list ./...);
        - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.25.1 golangci-lint run -v
      script:
        # Build
        - make build
        # Test
        - go test -v ./...

    - name: Linux build w/ tests
      os: linux
      services: docker
      before_install:
        - go mod download
        - diff -u <(echo -n) <(gofmt -d $(find . -not -path "./vendor/*" -name "*.go"));
        - sed -i -e "s|COMMITTAG = \"\"|COMMITTAG = \"${TRAVIS_COMMIT}\"|g" service/library/version.go
        - cat service/library/version.go | grep 'COMMITTAG = "'
        - GO111MODULE=on go vet $(go list ./...);
        - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.25.1 golangci-lint run -v
        - wget https://files.devwithlando.io/lando-stable.deb
        - sudo dpkg -i lando-stable.deb
        - lando --experimental
      script:

        # Build
        - go build -o pygmy-go-linux-x86

        # Run pygmy
        - ./pygmy-go-linux-x86 pull;
        - ./pygmy-go-linux-x86 pull;
        - ./pygmy-go-linux-x86 status;
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml up;
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml status;
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml version;

        # Test the amazeeio-network for expected results
        - >
          docker network inspect amazeeio-network | jq '.[].Name' | grep "amazeeio-network";
          docker network inspect amazeeio-network | jq '.[].Containers' | jq '.[].Name' | grep "amazeeio-haproxy";
          docker network inspect amazeeio-network | jq '.[].Containers' | jq '.[].Name' | grep "amazeeio-mailhog";
          docker network inspect amazeeio-network | jq '.[].Containers' | jq '.[].Name' | grep "amazeeio-portainer";
          docker network inspect amazeeio-network | jq '.[].Containers' | jq '.[].IPv4Address';
          docker network inspect amazeeio-network | jq '.[].Containers' | jq '.[].IPv4Address' | grep "10.99.99.";

        # Test for configured container tags.
        - >
          docker inspect amazeeio-dnsmasq   | jq '.[].Config.Labels["pygmy.hocuspocus"]'  | grep "42";
          docker inspect amazeeio-dnsmasq   | jq '.[].Config.Labels["pygmy.abracadabra"]' | grep "1";
          docker inspect amazeeio-dnsmasq   | jq '.[].Config.Labels["pygmy.opensesame"]'  | grep "correct";
        - >
          docker inspect amazeeio-haproxy   | jq '.[].Config.Labels["pygmy.hocuspocus"]'  | grep "42";
          docker inspect amazeeio-haproxy   | jq '.[].Config.Labels["pygmy.abracadabra"]' | grep "1";
          docker inspect amazeeio-haproxy   | jq '.[].Config.Labels["pygmy.opensesame"]'  | grep "correct";
        - >
          docker inspect amazeeio-portainer | jq '.[].Config.Labels["pygmy.hocuspocus"]'  | grep "42";
          docker inspect amazeeio-portainer | jq '.[].Config.Labels["pygmy.abracadabra"]' | grep "1";
          docker inspect amazeeio-portainer | jq '.[].Config.Labels["pygmy.opensesame"]'  | grep "correct";
        - >
          docker inspect amazeeio-ssh-agent | jq '.[].Config.Labels["pygmy.hocuspocus"]'  | grep "42";
          docker inspect amazeeio-ssh-agent | jq '.[].Config.Labels["pygmy.abracadabra"]' | grep "1";
          docker inspect amazeeio-ssh-agent | jq '.[].Config.Labels["pygmy.opensesame"]'  | grep "correct";
        - >
          docker inspect amazeeio-mailhog   | jq '.[].Config.Labels["pygmy.hocuspocus"]'  | grep "42";
          docker inspect amazeeio-mailhog   | jq '.[].Config.Labels["pygmy.abracadabra"]' | grep "1";
          docker inspect amazeeio-mailhog   | jq '.[].Config.Labels["pygmy.opensesame"]'  | grep "correct";

        # Clone the official examples:
        - git clone --recurse-submodules https://github.com/uselagoon/lagoon-examples.git && cd lagoon-examples
        - git clone https://github.com/amazeeio/node-example.git lagoon-examples/node-example

        # Drupal 8 Simple:
        - cd lagoon-examples/drupal8-simple
        - docker-compose -p drupal8-example-simple up -d
        - docker-compose -p drupal8-example-simple exec cli composer install
        - sleep 5
        - curl --HEAD http://drupal-example-simple.docker.amazee.io
        - curl --HEAD http://drupal-example-simple.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p drupal8-example-simple down
        - docker-compose -p drupal8-example-simple rm
        - cd ../../

        # Drupal 9 Advanced:
        - cd lagoon-examples/drupal9-advanced
        - docker-compose -p drupal9-advanced up -d
        - docker-compose -p drupal9-advanced exec cli composer install
        - sleep 5
        - curl --HEAD http://drupal-example.docker.amazee.io
        - curl --HEAD http://drupal-example.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p drupal9-advanced down
        - docker-compose -p drupal9-advanced rm
        - cd ../../

        # Drupal 9 Simple:
        - cd lagoon-examples/drupal9-simple
        - docker-compose -p drupal-example-simple up -d
        - docker-compose -p drupal-example-simple exec cli composer install
        - sleep 5
        - curl --HEAD http://drupal-example-simple.docker.amazee.io
        - curl --HEAD http://drupal-example-simple.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p drupal-example-simple down
        - docker-compose -p drupal-example-simple rm
        - cd ../../

        # Silverstripe Advanced
        - cd lagoon-examples/silverstripe-advanced
        - docker-compose -p silverstripe-advanced up -d
        - docker-compose -p silverstripe-advanced exec cli composer install
        - sleep 5
        - curl --HEAD http://ss.docker.amazee.io
        - curl --HEAD http://ss.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p silverstripe-advanced down
        - docker-compose -p silverstripe-advanced rm
        - cd ../../

        # Silverstripe Simple
        - cd lagoon-examples/silverstripe-simple
        - docker-compose -p silverstripe-simple up -d
        - docker-compose -p silverstripe-simple exec cli composer install
        - sleep 5
        - curl --HEAD http://ss.docker.amazee.io
        - curl --HEAD http://ss.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p silverstripe-simple down
        - docker-compose -p silverstripe-simple rm
        - cd ../../

        # Wordpress Simple:
        - cd lagoon-examples/wordpress-simple
        - docker-compose -p wordpress-simple up -d
        - docker-compose -p wordpress-simple exec cli composer install
        - sleep 5
        - curl --HEAD http://wordpress-nginx.docker.amazee.io
        - curl --HEAD http://wordpress-nginx.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p wordpress-simple down
        - docker-compose -p wordpress-simple rm
        - cd ../../

        # Node:
        - cd lagoon-examples/node-example
        - npm install
        - docker-compose -p node up -d
        - curl --HEAD http://node.docker.amazee.io
        - curl --HEAD http://node.docker.amazee.io | grep "X-LAGOON"
        - docker-compose -p node down
        - docker-compose -p node rm
        - cd ../../

        # Cleanup after tests.
        - docker system prune --all --force

        # Cowsay test
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml down;
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml up | grep '< holy ship >';

        # Cleanup pygmy
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml down;
        - ./pygmy-go-linux-x86 --config examples/pygmy.travis.yml clean;

    - name: Windows build
      os: windows
      services: docker
      before_install:
        - go mod download
        - GO111MODULE=on go vet $(go list ./...);
        - sed -i -e "s|COMMITTAG = \"\"|COMMITTAG = \"${TRAVIS_COMMIT}\"|g" service/library/version.go
        - cat service/library/version.go | grep 'COMMITTAG = "'

      script:
        - export PYGMY_PATH=pygmy-go.exe;

        - go mod vendor
        - rm -f go.mod
        - rm -f go.sum
        - go build -o pygmy-go.exe .
        - cp pygmy-go.exe builds/pygmy-go.exe

        - builds/${PYGMY_PATH} --config examples/pygmy.travis.yml status;
        - builds/${PYGMY_PATH} --config examples/pygmy.travis.yml version;

notifications:
  slack: fubarhouse:upHoIzmKb4ikkBOt2cOwgKXY